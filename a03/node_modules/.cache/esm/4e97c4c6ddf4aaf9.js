_ddf‍.x([["sumToString",()=>sumToString],["maxAndMin",()=>maxAndMin],["countArray",()=>countArray]]);/**
 *
 * @param {number} a
 * @param {number} b
 * @returns {string} 'a + b = (a + b)'
 *
 * example: sumToString(3, 4)
 * returns: '3 + 4 = 7'
 * see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
 */
       function sumToString(a, b) {
    let c = a+b
    return a + '+' + b  + '=' + (a+b) 
}
sumToString(3,4)


/**
 *
 * @param {number} startNumber
 * @param {number} endNumber
 * @returns {number[]}
 *
 * example: getIncreasingArray(3, 7)
 * returns: [ 3, 4, 5, 6, 7 ]
 *
 */
// export function getIncreasingArray(startNumber, endNumber) {
//     let res = 
//     for (int i=startNumber; i < )

// }

/**
 *
 * @param {number[]} numbers
 * @return {{min: number, max: number}}
 * see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
 * and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math
 */
       function maxAndMin(numbers) {
    
    let num = numbers.sort();
    let dict = {
        'min':num[0], 
        'max':num[num.length - 1]
    }
    return dict;

}

/**
 *
 * @param array - An array of any primitive type
 * @returns {object} Object where the keys are the values that were passed in
 * and the value was the number of times it occurred.
 *
 * example: countArray([3, 6, 3, 2, 2, 3, 'some', 'hello', 'some', [1, 2]])
 * returns: {'2': 2, '3': 3, '6': 1, some: 2, hello: 1, '1,2': 1}
 *
 */
       function countArray(array) {
    // let map = new Map();
    
    // for (let i = 0; i < array.length; i++){
    //     if (map.has(array[i])){
    //         map[ar]
    //     }
    // }

    let map = {}
    for (let v of array){
        map[v] = map[v] + 1 || 1
    }
    return map
}
console.log(countArray([3, 6, 3, 2, 2, 3, 'some', 'hello', 'some', [1, 2]]))
